<html lang="en">

<head>
  <base />
  <meta charset="UTF-8">
  <meta protocol="Recursed" ticker="The Recursed" operation="deploy" total_supply="69420" rare_supply="100" name="viewport" content="width=device-width, initial-scale=1.0">
  <style>
    body {
      font-family: comic sans;
      display: flex;
      flex-direction: column;
      align-items: center;
      background-color: #FFA500;
      margin: 0;
      padding-bottom: 1%;
    }

    .container {
      display: flex;
      flex-direction: column;
      align-items: center;
      margin-bottom: 1rem;
    }

    select {
      margin-bottom: 1rem;
      outline: none;
      font-size: 1rem;
    }

    .title {
      font-size: 1.5rem;
      font-weight: bold;
      margin-bottom: 0.5rem;
    }

    .row {
      display: grid;
      grid-template-columns: repeat(3, 1fr);
      align-items: center;
      gap: 1rem;
    }

    .carousel-container {
      position: relative;
      width: 8rem;
      height: 8rem;
      border: 0.1rem solid #333;
      image-rendering: pixelated
    }

    .carousel img {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      object-fit: cover;
    }

    .buttons {
      display: flex;
      justify-content: space-between;
    }

    .prev,
    .next {
      width: 3.5rem;
      padding: 0.3rem;
      font-size: 0.8rem;
      background-color: #333;
      color: #fff;
      cursor: pointer;
      border: 0.05rem solid #333;
      margin: 0.5rem 0;
    }

    #artifact {
      position: relative;
      width: 24rem;
      height: 24rem;
      border: 0.1rem solid #333;
      margin-top: 1rem;
    }

    #artifact img {
      position: absolute;
      width: 100%;
      height: 100%;
      object-fit: contain;
      top: 0;
      left: 0;
      image-rendering: -moz-crisp-edges;
      image-rendering: -webkit-optimize-contrast;
      image-rendering: pixelated;
      image-rendering: crisp-edges;
    }

    .terminal-container {
      display: flex;
      flex-direction: column;
      align-items: center;
      margin-top: 1rem;
      font-family: 'Courier New', monospace;
    }

    .generate-button {
      background-color: #333;
      color: #FFA500;
      padding: 0.5rem 1rem;
      font-size: 1rem;
      border: 0.1rem solid #333;
      cursor: pointer;
      margin-bottom: 0.5rem;
    }

    .terminal {
      border: 0.1rem solid #333;
      width: 80%;
      min-height: 10rem;
      background-color: rgb(0, 0, 0);
      color: #26ff00;
      padding: 1rem;
      font-size: 1rem;
      overflow-wrap: break-word;
      resize: none;
      cursor: text;
      width: calc(8rem * 3 + 1rem * 2);
    }

    .mlgo {
      margin-top: 5%;
      margin-bottom: -13%;
      width: 25%;
      image-rendering: pixelated;
    }

    .wttt {
      margin-left: 56%;
    }

    .light-sweep {
      width: 100%;
      position: relative;
      overflow: hidden;
    }
  </style>
</head>

<body>
     <h2 class="title">The Recursed</h2>
    <div>
      <label>
        Choose Your Satoshi Anon
        <select id="traitSelection">
          <option value="black">Silk Road</option>
          <option value="mint">Common</option>
          <option value="orange">Pizza Sats</option>
          <option value="purple">Palindrome Sats</option>
          <option value="rainbow">Uncommon Sats</option>
        </select>
      </label>
    </div>
    <div class="row">
      <div class="trait">
        <div class="carousel-container" id="backgroundCarousel">
          <img id="backgroundImg" alt="Background" width=100%, initial-scale=1.0 />
        </div>
        <div class="buttons">
          <button class="prev" id="prevBackground">&lt;</button>
          <button class="next" id="nextBackground">&gt;</button>
        </div>
      </div>
      <div class="trait">
        <div class="carousel-container" id="bodyCarousel">
          <img id="bodyImg" alt="Body" width=100%, initial-scale=1.0 />
        </div>
        <div class="buttons">
          <button class="prev" id="prevBody">&lt;</button>
          <button class="next" id="nextBody">&gt;</button>
        </div>
      </div>
      <div class="trait">
        <div class="carousel-container" id="headCarousel">
          <img id="headImg" alt="Head" width=100%, initial-scale=1.0 />
        </div>
        <div class="buttons">
          <button class="prev" id="prevHead">&lt;</button>
          <button class="next" id="nextHead">&gt;</button>
        </div>
      </div>
      <div class="trait wttt">
        <div class="carousel-container" id="wheadCarousel">
          <img id="wbodyImg" alt="wbody" width=100%, initial-scale=1.0 />
        </div>
        <div class="buttons">
          <button class="prev" id="prevwBody">&lt;</button>
          <button class="next" id="nextwBody">&gt;</button>
        </div>
      </div>
      <div class="trait wttt">
        <div class="carousel-container" id="wbodyCarousel">
          <img id="wheadImg" alt="wHead" width=100%, initial-scale=1.0 />
        </div>
        <div class="buttons">
          <button class="prev" id="prevwHead">&lt;</button>
          <button class="next" id="nextwHead">&gt;</button>
        </div>
      </div>
    </div>
  </div>
  <div id="artifact">

    <img id="finalBackground" alt="Final Background" />
    <img id="finalwBody" alt="Final wBody" />
    <img id="finalwHead" alt="Final wHead" />
    <img id="finalBody" alt="Final Body" />
    <img id="finalHead" alt="Final Head" />

  </div>
  <div class="terminal-container">
    <button class="generate-button" id="generateHTML">Generate Recursive Inscription HTML</button>
    <textarea readonly class="terminal" id="terminal" onfocus="this.select()"></textarea>
  </div>

  <script>
    const backgrounds = ["9cf6ec9ef4ade7789d042cce4df79611a68c9bb74b951201383bca7f45b7b7f3i0", "", "", "", "", ""];
    const blackBodies = ["99fa6e7069ac9311edc849c3c225c0637ce23358df561491a3108a21cb9e5261i0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""];
    const blackHeads = ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""];


    const mintBodies = ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""];
    const orangeBodies = ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""];
    const purpleBodies = ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""];
    const rainbowBodies = ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""];
    const whiteBodies = ["=", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""];

    const mintHeads = ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "ec72c3499ccc00172c5829430651bcaf0c832eb7f5c52057b96a1ff2511cf5d0i0"];
    const orangeHeads = ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""];
    const purpleHeads = ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""];
    const whiteHeads = ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""];


    let currentBackgroundIndex = 0;
    let currentBodyIndex = 0;
    let currentHeadIndex = 0;
    let currentwBodyIndex = 0;
    let currentwHeadIndex = 0;

    const backgroundImg = document.getElementById("backgroundImg");
    const bodyImg = document.getElementById("bodyImg");
    const headImg = document.getElementById("headImg");
    const wbodyImg = document.getElementById("wbodyImg");
    const wheadImg = document.getElementById("wheadImg");
    const finalBackground = document.getElementById("finalBackground");
    const finalBody = document.getElementById("finalBody");
    const finalHead = document.getElementById("finalHead");
    const finalwBody = document.getElementById("finalwBody");
    const finalwHead = document.getElementById("finalwHead");
    const traitSelection = document.getElementById("traitSelection");

    //let thisBody;
    //let thisHead;
    //let thisBG; href="https://ordinals.com/"

    function setIndex(trait, indexOffset) {
      const {
        ids,
        currentIdx,
        imgElement,
        finalImgElement
      } = trait;
      const newIdx = (currentIdx + indexOffset + ids.length) % ids.length;

      imgElement.src = `/content/${ids[newIdx]}`;
      finalImgElement.src = `/content/${ids[newIdx]}`;
      trait.currentIdx = newIdx;

    }

    const backgroundTrait = {
      ids: backgrounds,
      currentIdx: currentBackgroundIndex,
      imgElement: backgroundImg,
      finalImgElement: finalBackground,
    };

    var bodyTrait;
    var headTrait;
    var wbodyTrait;
    var wheadTrait;
    let bodyIds, headIds, wbodyIds, wheadIds;

    function updateTraitImages() {
      const traitType = traitSelection.value;

      wbodyIds = whiteBodies;
      wheadIds = whiteHeads;

      switch (traitType) {
        case "mint":
          bodyIds = mintBodies;
          headIds = mintHeads;
          break;
        case "orange":
          bodyIds = orangeBodies;
          headIds = orangeHeads;
          break;
        case "purple":
          bodyIds = purpleBodies;
          headIds = purpleHeads;
          break;
        case "rainbow":
          bodyIds = rainbowBodies;
          headIds = rainbowHeads;
          break;
        case "black":
        default:
          bodyIds = blackBodies;
          headIds = blackHeads;
          break;
      }

      bodyTrait = {
        ids: bodyIds,
        currentIdx: currentBodyIndex,
        imgElement: bodyImg,
        finalImgElement: finalBody,
      };

      headTrait = {
        ids: headIds,
        currentIdx: currentHeadIndex,
        imgElement: headImg,
        finalImgElement: finalHead,
      };

      wbodyTrait = {
        ids: wbodyIds,
        currentIdx: currentwBodyIndex,
        imgElement: wbodyImg,
        finalImgElement: finalwBody,
      };

      wheadTrait = {
        ids: wheadIds,
        currentIdx: currentwHeadIndex,
        imgElement: wheadImg,
        finalImgElement: finalwHead,
      };

      setIndex(bodyTrait, 0);
      setIndex(headTrait, 0);
      setIndex(wbodyTrait, 0);
      setIndex(wheadTrait, 0);
    }

    traitSelection.addEventListener("change", updateTraitImages);

    document.getElementById("prevBackground").addEventListener("click", () => {
      setIndex(backgroundTrait, -1);
    });
    document.getElementById("nextBackground").addEventListener("click", () => {
      setIndex(backgroundTrait, 1);
    });
    document.getElementById("prevBody").addEventListener("click", () => {
      setIndex(bodyTrait, -1);
    });
    document.getElementById("nextBody").addEventListener("click", () => {
      setIndex(bodyTrait, 1);
    });
    document.getElementById("prevHead").addEventListener("click", () => {
      setIndex(headTrait, -1);
    });
    document.getElementById("nextHead").addEventListener("click", () => {
      setIndex(headTrait, 1);
    });

    document.getElementById("prevwBody").addEventListener("click", () => {
      setIndex(wbodyTrait, -1);
    });
    document.getElementById("nextwBody").addEventListener("click", () => {
      setIndex(wbodyTrait, 1);
    });
    document.getElementById("prevwHead").addEventListener("click", () => {
      setIndex(wheadTrait, -1);
    });
    document.getElementById("nextwHead").addEventListener("click", () => {
      setIndex(wheadTrait, 1);
    });

    // Set the initial trait selections
    setIndex(backgroundTrait, 0);
    updateTraitImages();

    const generateButton = document.getElementById("generateHTML");
    const terminal = document.getElementById("terminal");

    function animateTerminal(input, text, index = 0, delay = 2) {
      if (index < text.length) {
        input.value += text[index];
        input.scrollTop = input.scrollHeight; // scroll to the bottom
        setTimeout(() => animateTerminal(input, text, index + 1, delay), delay);
      }
    }

    function generateHtmlCode() {
      var backgroundSrc = finalBackground.src;
      var bodySrc = finalBody.src;
      var headSrc = finalHead.src;
      var wbodySrc = finalwBody.src;
      var wheadSrc = finalwHead.src;

      console.log(backgroundSrc, bodySrc, headSrc)

      backgroundSrc = backgroundSrc.replace(/^(https?:\/\/[^/]+)?/, '');
      bodySrc = bodySrc.replace(/^(https?:\/\/[^/]+)?/, '');
      headSrc = headSrc.replace(/^(https?:\/\/[^/]+)?/, '');
      wbodySrc = wbodySrc.replace(/^(https?:\/\/[^/]+)?/, '');
      wheadSrc = wheadSrc.replace(/^(https?:\/\/[^/]+)?/, '');

      backgroundSrc = backgroundSrc.replace("file:///", "").replace("C:", "");
      bodySrc = bodySrc.replace("file:///", "").replace("C:", "");
      headSrc = headSrc.replace("file:///", "").replace("C:", "");
      wbodySrc = wbodySrc.replace("file:///", "").replace("C:", "");
      wheadSrc = wheadSrc.replace("file:///", "").replace("C:", "");

      const htmlCode = `
<html lang="en">
<head>
  <base/>
  <meta charset="UTF-8">
  <meta protocol="FORGE" ticker="Recursive-Robots" operation="mint" name="viewport" content="width=device-width, initial-scale=1.0">
  <style>
    body { display: flex; justify-content: center; align-items: center; height: 100vh; margin: 0; }
    #artifact { position: relative; width: 24rem; height: 24rem; }
    #artifact img { position: absolute; width: 100%; height: 100%; object-fit: contain; top: 0; left: 0; image-rendering: pixelated }
  </style>
</head>
<body>
  <div id="artifact">
    <img src="${backgroundSrc}" alt="Background" />
    <img src="${wbodySrc}" alt="Body" />
    <img src="${wheadSrc}" alt="Head" />
    <img src="${bodySrc}" alt="Body" />
    <img src="${headSrc}" alt="Head" />
  </div>

</body>
</html>`;

      return htmlCode;
    }

    generateButton.addEventListener("click", () => {
      terminal.value = "";
      const htmlCode = generateHtmlCode();
      animateTerminal(terminal, htmlCode);
    });
  </script>
</body>

</html>
